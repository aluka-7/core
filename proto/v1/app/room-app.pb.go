// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/app/room-app.proto

package app

import (
	context "context"
	fmt "fmt"
	opt "github.com/aluka-7/core/proto/v1/opt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/v1/app/room-app.proto", fileDescriptor_27442bd3e1575646) }

var fileDescriptor_27442bd3e1575646 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x33, 0xd4, 0x4f, 0x2c, 0x28, 0xd0, 0x2f, 0xca, 0xcf, 0xcf, 0xd5, 0x4d, 0x2c,
	0x28, 0xd0, 0x03, 0x8b, 0x0a, 0x31, 0x27, 0x16, 0x14, 0x48, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7,
	0xa4, 0xea, 0x83, 0x85, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x2a, 0xa4,
	0x10, 0xda, 0x53, 0x4a, 0xf2, 0x21, 0xda, 0x53, 0x4a, 0xf2, 0xb1, 0x4a, 0x26, 0x25, 0x16, 0xa7,
	0x22, 0x24, 0x8d, 0x6c, 0xb9, 0xb8, 0x82, 0xf2, 0xf3, 0x73, 0x1d, 0x0b, 0x0a, 0x82, 0x0a, 0x92,
	0x85, 0xf4, 0xb9, 0x38, 0x7c, 0x32, 0x8b, 0x4b, 0x40, 0x22, 0x42, 0xbc, 0x7a, 0xf9, 0x05, 0x25,
	0x7a, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0x41, 0xa9, 0x85, 0x52, 0x42, 0x7a, 0x20, 0x4d, 0x30, 0xd9,
	0xa0, 0xd4, 0x82, 0x9c, 0x4a, 0x25, 0x06, 0x27, 0x89, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x48, 0x62, 0x03, 0x9b, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x39, 0x04,
	0x79, 0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomAppRpcClient is the client API for RoomAppRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomAppRpcClient interface {
	// 获取用户列表
	ListRoom(ctx context.Context, in *opt.QueryReq, opts ...grpc.CallOption) (*opt.ListRoomReply, error)
}

type roomAppRpcClient struct {
	cc *grpc.ClientConn
}

func NewRoomAppRpcClient(cc *grpc.ClientConn) RoomAppRpcClient {
	return &roomAppRpcClient{cc}
}

func (c *roomAppRpcClient) ListRoom(ctx context.Context, in *opt.QueryReq, opts ...grpc.CallOption) (*opt.ListRoomReply, error) {
	out := new(opt.ListRoomReply)
	err := c.cc.Invoke(ctx, "/app.RoomAppRpc/ListRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomAppRpcServer is the server API for RoomAppRpc service.
type RoomAppRpcServer interface {
	// 获取用户列表
	ListRoom(context.Context, *opt.QueryReq) (*opt.ListRoomReply, error)
}

// UnimplementedRoomAppRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRoomAppRpcServer struct {
}

func (*UnimplementedRoomAppRpcServer) ListRoom(ctx context.Context, req *opt.QueryReq) (*opt.ListRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}

func RegisterRoomAppRpcServer(s *grpc.Server, srv RoomAppRpcServer) {
	s.RegisterService(&_RoomAppRpc_serviceDesc, srv)
}

func _RoomAppRpc_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(opt.QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAppRpcServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.RoomAppRpc/ListRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAppRpcServer).ListRoom(ctx, req.(*opt.QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomAppRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.RoomAppRpc",
	HandlerType: (*RoomAppRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoom",
			Handler:    _RoomAppRpc_ListRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/app/room-app.proto",
}
