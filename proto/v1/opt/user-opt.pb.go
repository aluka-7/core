// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/opt/user-opt.proto

package opt

import (
	context "context"
	fmt "fmt"
	opt "github.com/aluka-7/core/proto/v1/opt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/v1/opt/user-opt.proto", fileDescriptor_2beaf3724ec3a840) }

var fileDescriptor_2beaf3724ec3a840 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x33, 0xd4, 0xcf, 0x2f, 0x28, 0xd1, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0xcd, 0x2f,
	0x28, 0xd1, 0x03, 0x8b, 0x0a, 0x31, 0xe7, 0x17, 0x94, 0x48, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7,
	0xa4, 0xea, 0x83, 0x85, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x2a, 0xa4,
	0x10, 0xda, 0x53, 0x4a, 0xf2, 0x21, 0xda, 0x53, 0x4a, 0xf2, 0xb1, 0x4a, 0x26, 0x25, 0x16, 0xa7,
	0x22, 0x24, 0x8d, 0x6c, 0xb9, 0xb8, 0x42, 0x8b, 0x53, 0x8b, 0x1c, 0x0b, 0x0a, 0x82, 0x0a, 0x92,
	0x85, 0xf4, 0xb9, 0x38, 0x7c, 0x32, 0x8b, 0x4b, 0x40, 0x22, 0x42, 0xbc, 0x7a, 0x20, 0x17, 0x04,
	0x96, 0xa6, 0x16, 0x55, 0x06, 0xa5, 0x16, 0x4a, 0x09, 0xe9, 0x81, 0x34, 0xc1, 0x64, 0x83, 0x52,
	0x0b, 0x72, 0x2a, 0x95, 0x18, 0x9c, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e,
	0x21, 0x89, 0x0d, 0x6c, 0xbe, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x01, 0xc4, 0xf4, 0xda,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserAppRpcClient is the client API for UserAppRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAppRpcClient interface {
	// 获取用户列表
	ListUser(ctx context.Context, in *opt.QueryReq, opts ...grpc.CallOption) (*opt.ListUserReply, error)
}

type userAppRpcClient struct {
	cc *grpc.ClientConn
}

func NewUserAppRpcClient(cc *grpc.ClientConn) UserAppRpcClient {
	return &userAppRpcClient{cc}
}

func (c *userAppRpcClient) ListUser(ctx context.Context, in *opt.QueryReq, opts ...grpc.CallOption) (*opt.ListUserReply, error) {
	out := new(opt.ListUserReply)
	err := c.cc.Invoke(ctx, "/opt.UserAppRpc/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAppRpcServer is the server API for UserAppRpc service.
type UserAppRpcServer interface {
	// 获取用户列表
	ListUser(context.Context, *opt.QueryReq) (*opt.ListUserReply, error)
}

// UnimplementedUserAppRpcServer can be embedded to have forward compatible implementations.
type UnimplementedUserAppRpcServer struct {
}

func (*UnimplementedUserAppRpcServer) ListUser(ctx context.Context, req *opt.QueryReq) (*opt.ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}

func RegisterUserAppRpcServer(s *grpc.Server, srv UserAppRpcServer) {
	s.RegisterService(&_UserAppRpc_serviceDesc, srv)
}

func _UserAppRpc_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(opt.QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAppRpcServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opt.UserAppRpc/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAppRpcServer).ListUser(ctx, req.(*opt.QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAppRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opt.UserAppRpc",
	HandlerType: (*UserAppRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _UserAppRpc_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/opt/user-opt.proto",
}
